#include <stdio.h>
#include <stdlib.h>

struct tnode {
    int data;
    struct tnode *leftc;
    struct tnode *rightc;
};

void insert(struct tnode **s, int num);
void inorder(struct tnode *);
int search(struct tnode *s, int ele);

int main() {
    struct tnode *root = NULL;
    int num;
    char choice;

    do {
        printf("Enter the element to be inserted in the tree\n");
        if (scanf("%d", &num) != 1) {
            printf("Invalid input. Please enter a valid integer.\n");
            // Clear input buffer
            while (getchar() != '\n');
            continue;
        }
        insert(&root, num);
        printf("Do you want to insert another element?\n");
        scanf(" %c", &choice);
        // Clear input buffer
        while (getchar() != '\n');
    } while (choice == 'y' || choice == 'Y');

    printf("Inorder Traversal : The elements in the tree are ");
    inorder(root);
    printf("\n");

    int searchNum;
    printf("Enter the element to be searched\n");
    if (scanf("%d", &searchNum) != 1) {
        printf("Invalid input. Please enter a valid integer.\n");
        return 1;
    }
    if (search(root, searchNum))
        printf("%d found\n", searchNum);
    else
        printf("%d not found\n", searchNum);

    return 0;
}

void insert(struct tnode **s, int num) {
    if (*s == NULL) {
        *s = (struct tnode *)malloc(sizeof(struct tnode));
        (*s)->data = num;
        (*s)->leftc = NULL;
        (*s)->rightc = NULL;
    } else {
        if (num < (*s)->data)
            insert(&((*s)->leftc), num);
        else if (num > (*s)->data)
            insert(&((*s)->rightc), num);
        // Note: if num is already present, we are not inserting it again.
    }
}

void inorder(struct tnode *s) {
    if (s != NULL) {
        inorder(s->leftc);
        printf("%d ", s->data);
        inorder(s->rightc);
    }
}

int search(struct tnode *s, int ele) {
    if (s == NULL)
        return 0;
    else if (s->data == ele)
        return 1;
    else if (ele < s->data)
        return search(s->leftc, ele);
    else
        return search(s->rightc, ele);
}
