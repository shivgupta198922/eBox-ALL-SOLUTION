#include <stdio.h>
#include <stdlib.h>

struct queue {
    int contents[5];
	    int front;
		    int count;
			};

 void initQueue(struct queue *q) {
 q->front = 0;
 q->count = 0;
 }

 void enQueue(struct queue *q, int element) {
 if (q->count == 5) {
 printf("Queue is full\n");
 return;
 }
 int rear = (q->front + q->count) % 5;
  q->contents[rear] = element;
 q->count++;
 }

 int deQueue(struct queue *q) {
 if (q->count == 0) {
 printf("Queue is empty\n");
 return -1000;
 }
 int element = q->contents[q->front];
 q->front = (q->front + 1) % 5;
 q->count--;
 return element;
 }

 void display(struct queue q) {
if (q.count == 0) {
printf("{}\n");
return;
}
//printf("{ ");
int index = q.front;
for (int i = 0; i < q.count; i++) {
printf("%d ", q.contents[index]);
 index = (index + 1) % 5;
 }
 printf("\n");
 }

 void printMenu() {
 printf("\nChoice 1 : Enter element into Queue\n");
 printf("Choice 2 : Delete element from Queue\n");
 printf("Choice 3 : Display\n");
 printf("Any other choice : Exit\n");
 }

 int main() {
 struct queue q;
 initQueue(&q);

 int choice, element;
 do {
 printMenu();
 printf("Enter your choice");
 scanf("%d", &choice);

 switch (choice) {
 case 1:
 printf("\nEnter the element to be inserted/entered");
 scanf("%d", &element);
 enQueue(&q, element);
 break;
 case 2:
 element = deQueue(&q);
 if (element != -1000) {
 printf("\nThe deleted element is %d\n", element);
 }
 break;
 case 3:
 printf("The contents of the queue are");
 display(q);
 break;

 }
 } while (choice >= 1 && choice <= 3);

 return 0;
 }
